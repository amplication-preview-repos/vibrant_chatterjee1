/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Relation as PrismaRelation } from "@prisma/client";

export class RelationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RelationCountArgs, "select">): Promise<number> {
    return this.prisma.relation.count(args);
  }

  async relations<T extends Prisma.RelationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RelationFindManyArgs>
  ): Promise<PrismaRelation[]> {
    return this.prisma.relation.findMany<Prisma.RelationFindManyArgs>(args);
  }
  async relation<T extends Prisma.RelationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RelationFindUniqueArgs>
  ): Promise<PrismaRelation | null> {
    return this.prisma.relation.findUnique(args);
  }
  async createRelation<T extends Prisma.RelationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RelationCreateArgs>
  ): Promise<PrismaRelation> {
    return this.prisma.relation.create<T>(args);
  }
  async updateRelation<T extends Prisma.RelationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RelationUpdateArgs>
  ): Promise<PrismaRelation> {
    return this.prisma.relation.update<T>(args);
  }
  async deleteRelation<T extends Prisma.RelationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RelationDeleteArgs>
  ): Promise<PrismaRelation> {
    return this.prisma.relation.delete(args);
  }
}
