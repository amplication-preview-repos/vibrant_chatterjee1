/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Column as PrismaColumn } from "@prisma/client";

export class ColumnServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ColumnCountArgs, "select">): Promise<number> {
    return this.prisma.column.count(args);
  }

  async columns<T extends Prisma.ColumnFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ColumnFindManyArgs>
  ): Promise<PrismaColumn[]> {
    return this.prisma.column.findMany<Prisma.ColumnFindManyArgs>(args);
  }
  async column<T extends Prisma.ColumnFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ColumnFindUniqueArgs>
  ): Promise<PrismaColumn | null> {
    return this.prisma.column.findUnique(args);
  }
  async createColumn<T extends Prisma.ColumnCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ColumnCreateArgs>
  ): Promise<PrismaColumn> {
    return this.prisma.column.create<T>(args);
  }
  async updateColumn<T extends Prisma.ColumnUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ColumnUpdateArgs>
  ): Promise<PrismaColumn> {
    return this.prisma.column.update<T>(args);
  }
  async deleteColumn<T extends Prisma.ColumnDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ColumnDeleteArgs>
  ): Promise<PrismaColumn> {
    return this.prisma.column.delete(args);
  }
}
